---
title: "Rasch analysis"
subtitle: "Template file"
title-block-banner: "#009ca6"
title-block-banner-color: "#FFFFFF"
author: 
  name: Magnus Johansson
  affiliation: RISE Research Institutes of Sweden
  affiliation-url: https://www.ri.se/en/kbm
  orcid: 0000-0003-1669-592X
date: last-modified
date-format: iso
always_allow_html: true
format: 
  html:
    toc: true
    toc-depth: 3
    toc-title: "Table of contents"
    embed-resources: true
    standalone: true
    page-layout: full
    mainfont: 'Lato'
    monofont: 'Roboto Mono'
    code-overflow: wrap
    code-fold: true
    code-tools: true
    code-link: true
    number-sections: true
    fig-dpi: 96
    layout-align: left
    linestretch: 1.6
    theme:
      - materia
      - custom.scss
    css: styles.css
    license: CC BY
  pdf:
    papersize: a4
    documentclass: report 
execute:
  echo: true
  warning: false
  message: false
  cache: false
editor_options: 
  markdown: 
    wrap: 72
  chunk_output_type: console
---

```{r}
#| label: setup

# one package below requires that you use devtools to install them manually:
# first install devtools by
# install.packages('devtools')

library(RISEkbmRasch) # devtools::install_github("pgmj/RISEkbmRasch")
library(grateful)
library(ggrepel)
library(car)
library(kableExtra)
library(readxl)
library(tidyverse)
library(eRm)
library(iarm)
library(mirt)
library(psych)
library(psychotree)
library(matrixStats)
library(reshape)
library(knitr)
library(patchwork)
library(formattable) 
library(glue)

### optional libraries
#library(TAM)
#library(skimr)
#library(janitor)

### some commands exist in multiple packages, here we define preferred ones that are frequently used
select <- dplyr::select
count <- dplyr::count
recode <- car::recode
rename <- dplyr::rename
```


```{r}
### import data - this is just sample code, the files do not exist
#library(readxl) # for reading excel files
df <- read_excel("data/datafile.xls") # replace with your datafile as needed

#library(haven) # for SPSS and other formats
#library(labelled) # for getting labels and metadata from SPSS files

### Load item information
# make sure that variable names in df match with itemlabels$itemnr
itemlabels <- read_csv("data/itemlabels.csv")

### Make a backup of the dataframe, in case you need to revert changes at some point
df.all <- df
```



```{r}
# If needed, subset a random subsample of more manageable size.
set.seed(123)
library(rsample)
# subset 1/20 of the sample, stratify on year
data_split <- initial_split(df.all, prop = 1/20, strata = year)
# create dataframe with 1/20
d <- training(data_split)
# create dataframe with the remaining sample
df_rest  <- testing(data_split)
```


```{r}
##### Optionally: filter participants based on missing data

##### Before filtering out participants, you should check the missing data structure using RImissing() and RImissingP()

RImissing(d)
RImissingP(d)

# If you want to include participants with missing data, input the minimum number of items responses that a participant should have to be included in the analysis:
min.responses <- 3

# Select the variables we will work with, and filter out respondents with a lot of missing data
d <- d %>% 
  select(starts_with("item"),Sex,Age) %>%  # variables that start with "item", and DIF-variables Sex and Age
  filter(length(itemlabels$itemnr)-rowSums(is.na(.[itemlabels$itemnr])) >= min.responses) # include only respondents with data for at least 3 items

#---- OR just filter out all respondents with any missing data----
d <- d %>% 
  select(starts_with("WAAQ"),Sex,Age) %>% 
  #mutate(across(where(is.character), ~ as.numeric(.x))) %>% # if data is input as characters, the need to becom numeric
  na.omit()
```


```{r}
#---- Create DIF variables----
  
# DIF variables into vectors, recoded as factors since DIF functions need this
# these could also be stored in its own dataframe (not a tibble) instead of as vectors
dif.gender <- as.factor(d$Sex)
dif.age <- as.factor(d$Age)
# then remove them from dataframe, since we need a dataframe with only item data for the Rasch analyses
d$Sex <- NULL
d$Age <- NULL

### label gender variable as factor
# dif.gender <- factor(dif.gender,
#                       levels = c(1,2,3),
#                       labels = c("Female", "Male", "Other/missing response"))

# optionally, load RISE ggplot theme and color palettes and set the theme as default.
# just comment out the row below if you desire different theming
source("RISE_theme.R")
```

## All items in the analysis
```{r}
RIlistitems(d)
```

## Demographics
```{r}
#| layout-ncol: 2
RIdemographics(dif.gender, "Gender")
```

### Descriptives of raw data

Response distribution for all items are summarized below.

```{r}
#| tbl-cap: "Total number of responses for all items"
RIallresp(d)
```

### Descriptives - item level

```{r}
#| column: margin
RIlistItemsMargin(d, fontsize = 12)
```

::: panel-tabset
#### Tile plot
```{r}
RItileplot(d)
```
#### Stacked bars
```{r}
RIbarstack(d)
```
#### Barplots
```{r}
#| layout-ncol: 2
RIbarplot(d)
```
#### Missing responses
```{r}
RImissing(d)
RImissingP(d)
```
:::


## Rasch analysis 1

The eRm package, which uses Conditional Maximum Likelihood (CML)
estimation, will be used primarily. For this analysis, the Partial
Credit Model will be used.

```{r}
#| column: margin
#| echo: false
RIlistItemsMargin(d, fontsize = 13)
```

::: panel-tabset
### Conditional item fit
```{r}
#RIitemfit(d, cutoff = "Smith98")

simfit1 <- RIgetfit(d, iterations = 500, cpu = 8) 

RIitemfit(d, simfit1)
RIgetfitPlot(simfit1, d)
```
### CICC
```{r}
ICCplot(as.data.frame(d), 
        itemnumber = 1:4, 
        method = "cut", 
        itemdescrip = c("item1","item2","item3","item4"))

### also suggested:
# library(RASCHplot) # install first with `devtools::install_github("ERRTG/RASCHplot")`
# CICCplot(PCM(d),
#          which.item = c(1:4),
#          lower.groups = c(0,7,14,21,28,35),
#          grid.items = TRUE)
```
### Item-restscore
```{r}
RIrestscore(d)
```
### PCA
```{r}
#| tbl-cap: "PCA of Rasch model residuals"
RIpcmPCA(d)
```
### Local dependency
```{r}
# using partial gamma LD from library(iarm)
RIpartgamLD(d)
```

### Residual correlations
```{r}
simcor1 <- RIgetResidCor(d, iterations = 500, cpu = 8)
RIresidcorr(d, cutoff = simcor1$p99)
```
### 1st contrast loadings
```{r}
RIloadLoc(d)
```
### Response categories
```{r}
mirt(d, model=1, itemtype='Rasch', verbose = FALSE) %>% 
  plot(type="trace", as.table = TRUE, 
       theta_lim = c(-6,6))
# for fewer items or a more magnified figure, use:
#RIitemCats(d)
```
### Targeting
```{r}
#| fig-height: 5
# increase fig-height above as needed, if you have many items
RItargeting(d)
```
### Item hierarchy
```{r}
#| fig-height: 5
RIitemHierarchy(d)
```
### Score groups LR-test
```{r}
iarm::score_groups(as.data.frame(d)) %>% 
  as.data.frame(nm = "score_group") %>% 
  dplyr::count(score_group)

dif_plots <- d %>% 
  add_column(dif = iarm::score_groups(.)) %>% 
  split(.$dif) %>% # split the data using the DIF variable
  map(~ RItileplot(.x %>% dplyr::select(!dif)) + labs(title = .x$dif))
dif_plots[[1]] + dif_plots[[2]]

clr_tests(d, model = "PCM")
```
### Score groups obs-exp
```{r}
item_obsexp(PCM(d))
```
### Partial gamma DIF
```{r}
# using partial gamma from library(iarm)
RIpartgamDIF(d, dif.gender)
```
### Person fit
```{r}
RIpfit(d)
```
:::

## LRT-based DIF

```{r}
erm.out <- PCM(d)
LRtest(erm.out, splitcr = dif.gender) 
clr_tests(d, dif.gender, model = "PCM")
```

Review the documentation for further details, using `?LRtest` in your R console panel in Rstudio. There is also a plotting function, `plotGOF()` that may be of interest.

```{r}
#| column: margin
#| echo: false
RIlistItemsMargin(d, fontsize = 13)
```

::: panel-tabset
#### Item location table
```{r}
RIdifTableLR(d, dif.gender)

```
#### Item location figure
```{r}
#| fig-height: 7
RIdifFigureLR(d, dif.gender)

```
#### Item threshold table
```{r}
RIdifThreshTblLR(d, dif.gender)

```
#### Item threshold figure
```{r}
#| fig-height: 7
RIdifThreshFigLR(d, dif.gender)

```
:::

## DIF-analysis 2

### Gender
```{r}
#| column: margin
#| echo: false
RIlistItemsMargin(d, fontsize = 13)
```

::: panel-tabset
#### Table
```{r}
RIdifTable(d, dif.gender)
```
#### Locations
```{r}
RIdifFigure(d, dif.gender)
```
#### Thresholds
```{r}
RIdifFigThresh(d, dif.gender)
```
:::


## Person fit alt.

::: panel-tabset
### U3poly
```{r}
library(PerFit)
pfit_u3poly <- U3poly(matrix = d, 
                      Ncat = 5, # make sure to input number of response categories, not thresholds
                      IRT.PModel = "PCM")
```
### Cutoff information
```{r}
cutoff(pfit_u3poly)
```
### Flagged respondents
```{r}
flagged.resp(pfit_u3poly) %>% 
  pluck("Scores") %>% 
  as.data.frame() %>% 
  arrange(desc(PFscores))
```
:::


## Test Information (Reliability)
```{r}
RItif(d)
```



## Item parameters
```{r}
RIitemparams(d)
# write to CSV file
RIitemparams(d, output = "file", filename = "itemParameters.csv")
```

## Transformation table

```{r}
RIscoreSE(d)
```

## Ordinal/interval figure

```{r}
RIscoreSE(d, output = "figure")
```

## Software used
```{r}
pkgs <- cite_packages(cite.tidyverse = TRUE, 
                      output = "table",
                      bib.file = "grateful-refs.bib",
                      include.RStudio = TRUE,
                      out.dir = getwd())
formattable(pkgs, 
            table.attr = 'class=\"table table-striped\" style="font-size: 15px; font-family: Lato; width: 80%"')

```

## References
